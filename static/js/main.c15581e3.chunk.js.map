{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["BOARD_SIZE","Square","_ref","value","onSquareClick","React","createElement","className","onClick","Board","xIsNext","setXIsNext","useState","history","setHistory","Array","fill","currentSquares","length","winner","calculateWinner","status","slice","map","_","row","key","col","index","i","nextSquares","handleClick","squares","directions","r","c","dr","dc","line","nr","nc","nextIndex","push","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"+JAGA,MAAMA,EAAa,GAEnB,SAASC,EAAMC,GAA2B,IAA1BC,MAAEA,EAAKC,cAAEA,GAAeF,EACtC,OACEG,IAAAC,cAAA,UAAQC,UAAU,SAASC,QAASJ,GACjCD,GAKP,SAASM,IACP,MAAOC,EAASC,GAAcC,oBAAS,IAChCC,EAASC,GAAcF,mBAAS,CAACG,MAAMf,EAAaA,GAAYgB,KAAK,QACtEC,EAAiBJ,EAAQA,EAAQK,OAAS,GAyBhD,MAAMC,EAASC,EAAgBH,GAC/B,IAAII,EAASF,aAAoBA,oBAA2BT,EAAU,IAAM,MAE5E,OACEL,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKC,UAAU,UAAUc,GACzBhB,IAAAC,cAAA,UAAQE,QAbZ,WACMK,EAAQK,OAAS,IACnBJ,EAAWD,EAAQS,MAAM,EAAGT,EAAQK,OAAS,IAC7CP,GAAYD,MAUiB,QAC7BL,IAAAC,cAAA,UAAQE,QAnBZ,WACEM,EAAW,CAACC,MAAMf,EAAaA,GAAYgB,KAAK,QAChDL,GAAW,KAiBqB,SAC9BN,IAAAC,cAAA,OAAKC,UAAU,SACZQ,MAAMf,GACJgB,KAAK,MACLO,IAAI,CAACC,EAAGC,IACPpB,IAAAC,cAAA,OAAKoB,IAAKD,EAAKlB,UAAU,aACtBQ,MAAMf,GACJgB,KAAK,MACLO,IAAI,CAACC,EAAGG,KACP,MAAMC,EAAQH,EAAMzB,EAAa2B,EACjC,OACEtB,IAAAC,cAACL,EAAM,CAACyB,IAAKE,EAAOzB,MAAOc,EAAeW,GAAQxB,cAAeA,KAzCnF,SAAqByB,GACnB,GAAIT,EAAgBH,IAAmBA,EAAeY,GACpD,OAEF,MAAMC,EAAcb,EAAeK,QACnCQ,EAAYD,GAAKnB,EAAU,IAAM,IAEjCI,EAAW,IAAID,EAASiB,IACxBnB,GAAYD,IAiC2EqB,CAAYH,WAUvG,SAASR,EAAgBY,GACvB,MACMC,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,IAGP,IAAK,IAAIC,EAAI,EAAGA,EAAIlC,EAAYkC,IAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAInC,EAAYmC,IAAK,CACnC,MAAMP,EAAQM,EAAIlC,EAAamC,EAC/B,GAAKH,EAAQJ,GAEb,IAAK,MAAOQ,EAAIC,KAAOJ,EAAY,CACjC,IAAIK,EAAO,CAACV,GACZ,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMU,EAAKL,EAAIE,EAAKP,EAAGW,EAAKL,EAAIE,EAAKR,EACrC,GAAIU,EAAK,GAAKA,GAAMvC,GAAcwC,EAAK,GAAKA,GAAMxC,EAAY,MAC9D,MAAMyC,EAAYF,EAAKvC,EAAawC,EACpC,GAAIR,EAAQS,KAAeT,EAAQJ,GAAQ,MAC3CU,EAAKI,KAAKD,GAEZ,GAAoB,IAAhBH,EAAKpB,OAAc,OAAOc,EAAQJ,IAI5C,OAAO,KAGM,SAASe,IACtB,OAAOtC,IAAAC,cAACG,EAAK,MCxFAmC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK/C,IAAiD,IAAhDiD,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASrD,EACpEiD,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHvD,IAAAC,cAACD,IAAMwD,WAAU,KACfxD,IAAAC,cAACqC,EAAG,QAORC","file":"static/js/main.c15581e3.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from \"react\";\n\nconst BOARD_SIZE = 15; // 15x15の盤面\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(BOARD_SIZE * BOARD_SIZE).fill(null)]);\n  const currentSquares = history[history.length - 1];\n\n  function handleClick(i) {\n    if (calculateWinner(currentSquares) || currentSquares[i]) {\n      return;\n    }\n    const nextSquares = currentSquares.slice();\n    nextSquares[i] = xIsNext ? \"X\" : \"O\";\n\n    setHistory([...history, nextSquares]);\n    setXIsNext(!xIsNext);\n  }\n\n  function handleReset() {\n    setHistory([Array(BOARD_SIZE * BOARD_SIZE).fill(null)]);\n    setXIsNext(true);\n  }\n\n  function handleUndo() {\n    if (history.length > 1) {\n      setHistory(history.slice(0, history.length - 1));\n      setXIsNext(!xIsNext);\n    }\n  }\n\n  const winner = calculateWinner(currentSquares);\n  let status = winner ? `Winner: ${winner}` : `Next player: ${xIsNext ? \"X\" : \"O\"}`;\n\n  return (\n    <div>\n      <div className=\"status\">{status}</div>\n      <button onClick={handleUndo}>Undo</button>\n      <button onClick={handleReset}>Reset</button>\n      <div className=\"board\">\n        {Array(BOARD_SIZE)\n          .fill(null)\n          .map((_, row) => (\n            <div key={row} className=\"board-row\">\n              {Array(BOARD_SIZE)\n                .fill(null)\n                .map((_, col) => {\n                  const index = row * BOARD_SIZE + col;\n                  return (\n                    <Square key={index} value={currentSquares[index]} onSquareClick={() => handleClick(index)} />\n                  );\n                })}\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [];\n  const directions = [\n    [1, 0], // 横\n    [0, 1], // 縦\n    [1, 1], // 斜め（右下）\n    [1, -1], // 斜め（左下）\n  ];\n\n  for (let r = 0; r < BOARD_SIZE; r++) {\n    for (let c = 0; c < BOARD_SIZE; c++) {\n      const index = r * BOARD_SIZE + c;\n      if (!squares[index]) continue;\n\n      for (const [dr, dc] of directions) {\n        let line = [index];\n        for (let i = 1; i < 5; i++) {\n          const nr = r + dr * i, nc = c + dc * i;\n          if (nr < 0 || nr >= BOARD_SIZE || nc < 0 || nc >= BOARD_SIZE) break;\n          const nextIndex = nr * BOARD_SIZE + nc;\n          if (squares[nextIndex] !== squares[index]) break;\n          line.push(nextIndex);\n        }\n        if (line.length === 5) return squares[index];\n      }\n    }\n  }\n  return null;\n}\n\nexport default function App() {\n  return <Board />;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}